// Code generated by gobind. DO NOT EDIT.

// Java class zcncore.Zcncore is a proxy for talking to a Go program.
//
//   autogenerated by gobind -lang=java command-line-arguments
package zcncore;

import go.Seq;

public abstract class Zcncore {
	static {
		Seq.touch(); // for loading the native library
		_init();
	}
	
	private Zcncore() {} // uninstantiable
	
	// touch is called from other bound packages to initialize this package
	public static void touch() {}
	
	private static native void _init();
	
	private static final class proxyAuthCallback implements Seq.Proxy, AuthCallback {
		private final int refnum;
		
		@Override public final int incRefnum() {
		      Seq.incGoRef(refnum, this);
		      return refnum;
		}
		
		proxyAuthCallback(int refnum) { this.refnum = refnum; Seq.trackGoRef(refnum, this); }
		
		public native void onSetupComplete(long status, String err);
	}
	private static final class proxyGetBalanceCallback implements Seq.Proxy, GetBalanceCallback {
		private final int refnum;
		
		@Override public final int incRefnum() {
		      Seq.incGoRef(refnum, this);
		      return refnum;
		}
		
		proxyGetBalanceCallback(int refnum) { this.refnum = refnum; Seq.trackGoRef(refnum, this); }
		
		public native void onBalanceAvailable(long status, long value, String info);
	}
	private static final class proxyGetInfoCallback implements Seq.Proxy, GetInfoCallback {
		private final int refnum;
		
		@Override public final int incRefnum() {
		      Seq.incGoRef(refnum, this);
		      return refnum;
		}
		
		proxyGetInfoCallback(int refnum) { this.refnum = refnum; Seq.trackGoRef(refnum, this); }
		
		public native void onInfoAvailable(long op, long status, String info, String err);
	}
	private static final class proxyGetMintNonceCallback implements Seq.Proxy, GetMintNonceCallback {
		private final int refnum;
		
		@Override public final int incRefnum() {
		      Seq.incGoRef(refnum, this);
		      return refnum;
		}
		
		proxyGetMintNonceCallback(int refnum) { this.refnum = refnum; Seq.trackGoRef(refnum, this); }
		
		public native void onBalanceAvailable(long status, long value, String info);
	}
	private static final class proxyGetNonceCallback implements Seq.Proxy, GetNonceCallback {
		private final int refnum;
		
		@Override public final int incRefnum() {
		      Seq.incGoRef(refnum, this);
		      return refnum;
		}
		
		proxyGetNonceCallback(int refnum) { this.refnum = refnum; Seq.trackGoRef(refnum, this); }
		
		public native void onNonceAvailable(long status, long nonce, String info);
	}
	private static final class proxyGetNotProcessedZCNBurnTicketsCallback implements Seq.Proxy, GetNotProcessedZCNBurnTicketsCallback {
		private final int refnum;
		
		@Override public final int incRefnum() {
		      Seq.incGoRef(refnum, this);
		      return refnum;
		}
		
		proxyGetNotProcessedZCNBurnTicketsCallback(int refnum) { this.refnum = refnum; Seq.trackGoRef(refnum, this); }
		
		// skipped method GetNotProcessedZCNBurnTicketsCallback.OnBalanceAvailable with unsupported parameter or return types
		
	}
	private static final class proxyWalletCallback implements Seq.Proxy, WalletCallback {
		private final int refnum;
		
		@Override public final int incRefnum() {
		      Seq.incGoRef(refnum, this);
		      return refnum;
		}
		
		proxyWalletCallback(int refnum) { this.refnum = refnum; Seq.trackGoRef(refnum, this); }
		
		public native void onWalletCreateComplete(long status, String wallet, String err);
	}
	
	public static final String FAUCETSC_PFX = "/v1/screst/6dba10422e368813802877a85039d3985d96760ed844092319743fb3a76712d3";
	public static final String FaucetSmartContractAddress = "6dba10422e368813802877a85039d3985d96760ed844092319743fb3a76712d3";
	public static final String GET_BALANCE = "/v1/client/get/balance?client_id=";
	public static final String GET_BLOCK_INFO = "/v1/block/get?";
	public static final String GET_CHAIN_STATS = "/v1/chain/get/stats";
	public static final String GET_CLIENT = "/v1/client/get";
	public static final String GET_FAUCETSC_CONFIG = "/v1/screst/6dba10422e368813802877a85039d3985d96760ed844092319743fb3a76712d3/faucet-config";
	public static final String GET_LATEST_FINALIZED = "/v1/block/get/latest_finalized";
	public static final String GET_LATEST_FINALIZED_MAGIC_BLOCK = "/v1/block/get/latest_finalized_magic_block";
	public static final String GET_MAGIC_BLOCK_INFO = "/v1/block/magic/get?";
	public static final String GET_MINERSC_CONFIG = "/v1/screst/6dba10422e368813802877a85039d3985d96760ed844092319743fb3a76712d9/configs";
	public static final String GET_MINERSC_EVENTS = "/v1/screst/6dba10422e368813802877a85039d3985d96760ed844092319743fb3a76712d9/getEvents";
	public static final String GET_MINERSC_GLOBALS = "/v1/screst/6dba10422e368813802877a85039d3985d96760ed844092319743fb3a76712d9/globalSettings";
	public static final String GET_MINERSC_MINERS = "/v1/screst/6dba10422e368813802877a85039d3985d96760ed844092319743fb3a76712d9/getMinerList";
	public static final String GET_MINERSC_NODE = "/v1/screst/6dba10422e368813802877a85039d3985d96760ed844092319743fb3a76712d9/nodeStat";
	public static final String GET_MINERSC_POOL = "/v1/screst/6dba10422e368813802877a85039d3985d96760ed844092319743fb3a76712d9/nodePoolStat";
	public static final String GET_MINERSC_SHARDERS = "/v1/screst/6dba10422e368813802877a85039d3985d96760ed844092319743fb3a76712d9/getSharderList";
	public static final String GET_MINERSC_USER = "/v1/screst/6dba10422e368813802877a85039d3985d96760ed844092319743fb3a76712d9/getUserPools";
	public static final String GET_MINT_NONCE = "/v1/screst/6dba10422e368813802877a85039d3985d96760ed844092319743fb3a76712e0/v1/mint_nonce?client_id=%s";
	public static final String GET_NOT_PROCESSED_BURN_TICKETS = "/v1/screst/6dba10422e368813802877a85039d3985d96760ed844092319743fb3a76712e0/v1/not_processed_burn_tickets?ethereum_address=%s&nonce=%d";
	public static final String GET_VESTING_CLIENT_POOLS = "/v1/screst/2bba5b05949ea59c80aed3ac3474d7379d3be737e8eb5a968c52295e48333ead/getClientPools";
	public static final String GET_VESTING_CONFIG = "/v1/screst/2bba5b05949ea59c80aed3ac3474d7379d3be737e8eb5a968c52295e48333ead/vesting-config";
	public static final String GET_VESTING_POOL_INFO = "/v1/screst/2bba5b05949ea59c80aed3ac3474d7379d3be737e8eb5a968c52295e48333ead/getPoolInfo";
	public static final String MINERSC_PFX = "/v1/screst/6dba10422e368813802877a85039d3985d96760ed844092319743fb3a76712d9";
	public static final String MinerSmartContractAddress = "6dba10422e368813802877a85039d3985d96760ed844092319743fb3a76712d9";
	public static final String MultiSigRegisterFuncName = "register";
	public static final String MultiSigSmartContractAddress = "27b5ef7120252b79f9dd9c05505dd28f328c80f6863ee446daede08a84d651a7";
	public static final String MultiSigVoteFuncName = "vote";
	public static final long OpGetLockedTokens = 1;
	public static final long OpGetTokenLockConfig = 0;
	public static final long OpGetUserPoolDetail = 3;
	public static final long OpGetUserPools = 2;
	public static final long OpStorageSCGetAllocation = 6;
	public static final long OpStorageSCGetAllocations = 7;
	public static final long OpStorageSCGetAuthorizerSnapshots = 17;
	public static final long OpStorageSCGetBlobber = 11;
	public static final long OpStorageSCGetBlobberSnapshots = 14;
	public static final long OpStorageSCGetBlobbers = 10;
	public static final long OpStorageSCGetChallengePoolInfo = 5;
	/**
	 * storage SC ops
	 */
	public static final long OpStorageSCGetConfig = 4;
	public static final long OpStorageSCGetMinerSnapshots = 15;
	public static final long OpStorageSCGetReadPoolInfo = 8;
	public static final long OpStorageSCGetSharderSnapshots = 16;
	public static final long OpStorageSCGetSnapshots = 13;
	public static final long OpStorageSCGetStakePoolInfo = 9;
	public static final long OpStorageSCGetTransactions = 12;
	public static final long OpStorageSCGetUserSnapshots = 19;
	public static final long OpStorageSCGetValidatorSnapshots = 18;
	public static final long OpZCNSCGetAuthorizer = 21;
	public static final long OpZCNSCGetAuthorizerNodes = 22;
	public static final long OpZCNSCGetGlobalConfig = 20;
	public static final String PUT_TRANSACTION = "/v1/transaction/put";
	public static final String REGISTER_CLIENT = "/v1/client/put";
	public static final String STORAGESC_GET_ALLOCATION = "/v1/screst/6dba10422e368813802877a85039d3985d96760ed844092319743fb3a76712d7/allocation";
	public static final String STORAGESC_GET_ALLOCATIONS = "/v1/screst/6dba10422e368813802877a85039d3985d96760ed844092319743fb3a76712d7/allocations";
	public static final String STORAGESC_GET_BLOBBER = "/v1/screst/6dba10422e368813802877a85039d3985d96760ed844092319743fb3a76712d7/getBlobber";
	public static final String STORAGESC_GET_BLOBBERS = "/v1/screst/6dba10422e368813802877a85039d3985d96760ed844092319743fb3a76712d7/getblobbers";
	public static final String STORAGESC_GET_CHALLENGE_POOL_INFO = "/v1/screst/6dba10422e368813802877a85039d3985d96760ed844092319743fb3a76712d7/getChallengePoolStat";
	public static final String STORAGESC_GET_READ_POOL_INFO = "/v1/screst/6dba10422e368813802877a85039d3985d96760ed844092319743fb3a76712d7/getReadPoolStat";
	public static final String STORAGESC_GET_SC_CONFIG = "/v1/screst/6dba10422e368813802877a85039d3985d96760ed844092319743fb3a76712d7/storage-config";
	public static final String STORAGESC_GET_STAKE_POOL_INFO = "/v1/screst/6dba10422e368813802877a85039d3985d96760ed844092319743fb3a76712d7/getStakePoolStat";
	public static final String STORAGESC_GET_STAKE_POOL_USER_INFO = "/v1/screst/6dba10422e368813802877a85039d3985d96760ed844092319743fb3a76712d7/getUserStakePoolStat";
	public static final String STORAGESC_GET_TRANSACTIONS = "/v1/screst/6dba10422e368813802877a85039d3985d96760ed844092319743fb3a76712d7/transactions";
	public static final String STORAGESC_GET_USER_LOCKED_TOTAL = "/v1/screst/6dba10422e368813802877a85039d3985d96760ed844092319743fb3a76712d7/getUserLockedTotal";
	public static final String STORAGESC_PFX = "/v1/screst/6dba10422e368813802877a85039d3985d96760ed844092319743fb3a76712d7";
	public static final String STORAGE_GET_AUTHORIZER_SNAPSHOT = "/v1/screst/6dba10422e368813802877a85039d3985d96760ed844092319743fb3a76712d7/replicate-authorizer-aggregates";
	public static final String STORAGE_GET_BLOBBER_SNAPSHOT = "/v1/screst/6dba10422e368813802877a85039d3985d96760ed844092319743fb3a76712d7/replicate-blobber-aggregates";
	public static final String STORAGE_GET_MINER_SNAPSHOT = "/v1/screst/6dba10422e368813802877a85039d3985d96760ed844092319743fb3a76712d7/replicate-miner-aggregates";
	public static final String STORAGE_GET_SHARDER_SNAPSHOT = "/v1/screst/6dba10422e368813802877a85039d3985d96760ed844092319743fb3a76712d7/replicate-sharder-aggregates";
	public static final String STORAGE_GET_SNAPSHOT = "/v1/screst/6dba10422e368813802877a85039d3985d96760ed844092319743fb3a76712d7/replicate-snapshots";
	public static final String STORAGE_GET_USER_SNAPSHOT = "/v1/screst/6dba10422e368813802877a85039d3985d96760ed844092319743fb3a76712d7/replicate-user-aggregates";
	public static final String STORAGE_GET_VALIDATOR_SNAPSHOT = "/v1/screst/6dba10422e368813802877a85039d3985d96760ed844092319743fb3a76712d7/replicate-validator-aggregates";
	public static final long StatusAuthError = 5;
	public static final long StatusAuthTimeout = 7;
	public static final long StatusAuthVerifyFailed = 6;
	/**
	 * TODO: Change to specific error
	 */
	public static final long StatusError = 2;
	public static final long StatusInvalidSignature = 4;
	public static final long StatusNetworkError = 1;
	public static final long StatusRejectedByUser = 3;
	public static final long StatusSuccess = 0;
	public static final long StatusUnknown = -1;
	public static final String StorageSmartContractAddress = "6dba10422e368813802877a85039d3985d96760ed844092319743fb3a76712d7";
	public static final long TOKEN_UNIT = 10000000000L;
	public static final String TXN_VERIFY_URL = "/v1/transaction/get/confirmation?hash=";
	public static final String VESTINGSC_PFX = "/v1/screst/2bba5b05949ea59c80aed3ac3474d7379d3be737e8eb5a968c52295e48333ead";
	public static final String VestingSmartContractAddress = "2bba5b05949ea59c80aed3ac3474d7379d3be737e8eb5a968c52295e48333ead";
	public static final String ZCNSCSmartContractAddress = "6dba10422e368813802877a85039d3985d96760ed844092319743fb3a76712e0";
	/**
	 * zcn sc
	 */
	public static final String ZCNSC_PFX = "/v1/screst/6dba10422e368813802877a85039d3985d96760ed844092319743fb3a76712e0";
	
	public static native void checkConfig() throws Exception;
	/**
	 * CloseLog closes log file
	 */
	public static native void closeLog();
	/**
	 * ConvertToToken converts the SAS tokens to ZCN tokens
	# Inputs
	  - token: SAS tokens
	 */
	public static native double convertToToken(long token);
	public static native double convertTokenToUSD(double token) throws Exception;
	public static native double convertUSDToToken(double usd) throws Exception;
	/**
	 * CreateWallet creates the wallet for to configure signature scheme.
	It also registers the wallet again to blockchain.
	 */
	public static native void createWallet(WalletCallback statusCb) throws Exception;
	/**
	 * CreateWalletOffline creates the wallet for the config signature scheme.
	 */
	public static native String createWalletOffline() throws Exception;
	public static native String cryptoJsDecrypt(String passphrase, String encryptedMessage) throws Exception;
	public static native String cryptoJsEncrypt(String passphrase, String message) throws Exception;
	public static native String decrypt(String key, String text) throws Exception;
	public static native String encrypt(String key, String text) throws Exception;
	/**
	 * GetAllocation obtains allocation information.
	 */
	public static native void getAllocation(String allocID, GetInfoCallback cb) throws Exception;
	/**
	 * GetAllocations obtains list of allocations of a user.
	 */
	public static native void getAllocations(String clientID, GetInfoCallback cb) throws Exception;
	/**
	 * GetAuthorizerSnapshots obtains list of allocations of an authorizer.
	 */
	public static native void getAuthorizerSnapshots(long round, long limit, long offset, GetInfoCallback cb) throws Exception;
	/**
	 * GetBalance retrieve wallet balance from sharders
	
		# Inputs
		-	cb: callback for checking result
	 */
	public static native void getBalance(GetBalanceCallback cb) throws Exception;
	/**
	 * GetBalanceWallet retreives wallet balance from sharders
	 */
	public static native void getBalanceWallet(String walletStr, GetBalanceCallback cb) throws Exception;
	/**
	 * GetBlobber obtains blobber information.
	 */
	public static native void getBlobber(String blobberID, GetInfoCallback cb) throws Exception;
	/**
	 * GetBlobberSnapshots obtains list of allocations of a blobber.
	 */
	public static native void getBlobberSnapshots(long round, long limit, long offset, GetInfoCallback cb) throws Exception;
	/**
	 * GetBlobbers obtains list of all active blobbers.
	# Inputs
	  - cb: callback for checking result
	  - limit: how many blobbers should be fetched
	  - offset: how many blobbers should be skipped
	  - active: only fetch active blobbers
	 */
	public static native void getBlobbers(GetInfoCallback cb, long limit, long offset, boolean active);
	/**
	 * GetChallengePoolInfo obtains challenge pool information for an allocation.
	 */
	public static native void getChallengePoolInfo(String allocID, GetInfoCallback cb) throws Exception;
	public static native GetClientResponse getClientDetails(String clientID) throws Exception;
	public static native String getIdForUrl(String url);
	// skipped function GetLogger with unsupported parameter or return types
	
	public static native long getMinShardersVerify();
	public static native void getMinerSCConfig(GetInfoCallback cb) throws Exception;
	public static native void getMinerSCGlobals(GetInfoCallback cb) throws Exception;
	/**
	 * GetMinerSCNodeInfo get miner information from sharders
	# Inputs
	  - id: the id of miner
	  - cb: callback for checking result
	 */
	public static native void getMinerSCNodeInfo(String id, GetInfoCallback cb) throws Exception;
	public static native void getMinerSCNodePool(String id, GetInfoCallback cb) throws Exception;
	/**
	 * GetMinerSCUserInfo get user pool
	# Inputs
	  - clientID: the id of wallet
	  - cb: callback for checking result
	 */
	public static native void getMinerSCUserInfo(String clientID, GetInfoCallback cb) throws Exception;
	/**
	 * GetMinerSnapshots obtains list of allocations of a miner.
	 */
	public static native void getMinerSnapshots(long round, long limit, long offset, GetInfoCallback cb) throws Exception;
	/**
	 * GetMiners obtains list of all active miners.
	
		# Inputs
			-	cb: callback for checking result
	 */
	public static native void getMiners(GetInfoCallback cb) throws Exception;
	/**
	 * GetMintNonce retrieve mint nonce from sharders
	 */
	public static native void getMintNonce(GetMintNonceCallback cb) throws Exception;
	/**
	 * GetBalance retrieve wallet nonce from sharders
	 */
	public static native void getNonce(GetNonceCallback cb) throws Exception;
	/**
	 * GetNotProcessedZCNBurnTickets retrieve wallet burn tickets from sharders
	 */
	public static native void getNotProcessedZCNBurnTickets(String ethereumAddress, long startNonce, GetNotProcessedZCNBurnTicketsCallback cb) throws Exception;
	public static native String getPublicEncryptionKey(String mnemonic) throws Exception;
	/**
	 * GetReadPoolInfo obtains information about read pool of a user.
	 */
	public static native void getReadPoolInfo(String clientID, GetInfoCallback cb) throws Exception;
	/**
	 * GetSharderSnapshots obtains list of allocations of a sharder.
	 */
	public static native void getSharderSnapshots(long round, long limit, long offset, GetInfoCallback cb) throws Exception;
	/**
	 * GetSharders obtains list of all active sharders.
	# Inputs
	  - cb: callback for checking result
	 */
	public static native void getSharders(GetInfoCallback cb) throws Exception;
	/**
	 * GetSnapshots obtains list of allocations of a user.
	 */
	public static native void getSnapshots(long round, long limit, GetInfoCallback cb) throws Exception;
	/**
	 * GetStakePoolInfo obtains information about stake pool of a blobber and
	related validator.
	 */
	public static native void getStakePoolInfo(String blobberID, GetInfoCallback cb) throws Exception;
	/**
	 * GetStakePoolUserInfo for a user.
	# Inputs
	  - clientID: the id of wallet
	  - cb: callback for checking result
	 */
	public static native void getStakePoolUserInfo(String clientID, long offset, long limit, GetInfoCallback cb) throws Exception;
	/**
	 * GetStorageSCConfig obtains Storage SC configurations.
	 */
	public static native void getStorageSCConfig(GetInfoCallback cb) throws Exception;
	/**
	 * GetTransactions query transactions from sharders
	# Inputs
	  - toClient:   	receiver
	  - fromClient: 	sender
	  - block_hash: 	block hash
	  - sort:				desc or asc
	  - limit: 			how many transactions should be fetched
	  - offset:			how many transactions should be skipped
	  - cb: 					callback to get result
	 */
	public static native void getTransactions(String toClient, String fromClient, String block_hash, String sort, long limit, long offset, GetInfoCallback cb) throws Exception;
	/**
	 * GetUserSnapshots replicates user aggregates from events_db.
	 */
	public static native void getUserSnapshots(long round, long limit, long offset, GetInfoCallback cb) throws Exception;
	/**
	 * GetValidatorSnapshots obtains list of allocations of a validator.
	 */
	public static native void getValidatorSnapshots(long round, long limit, long offset, GetInfoCallback cb) throws Exception;
	/**
	 * GetVersion - returns version string
	 */
	public static native String getVersion();
	/**
	 * GetWalletClientID -- given a walletstr return ClientID
	 */
	public static native String getWalletClientID(String walletStr) throws Exception;
	/**
	 * GetWalletBalance retrieve wallet nonce from sharders
	 */
	public static native long getWalletNonce(String clientID) throws Exception;
	// skipped function GetWalletRaw with unsupported parameter or return types
	
	/**
	 * GetZcnUSDInfo returns USD value for ZCN token by tokenrate
	 */
	public static native double getZcnUSDInfo() throws Exception;
	/**
	 * Init initialize the SDK with miner, sharder and signature scheme provided in configuration provided in JSON format
	# Inputs
	  - chainConfigJSON: json format of zcn config
	    {
	    &#34;block_worker&#34;: &#34;https://dev.0chain.net/dns&#34;,
	    &#34;signature_scheme&#34;: &#34;bls0chain&#34;,
	    &#34;min_submit&#34;: 50,
	    &#34;min_confirmation&#34;: 50,
	    &#34;confirmation_chain_length&#34;: 3,
	    &#34;max_txn_query&#34;: 5,
	    &#34;query_sleep_time&#34;: 5,
	    &#34;preferred_blobbers&#34;: [&#34;https://dev.0chain.net/blobber02&#34;,&#34;https://dev.0chain.net/blobber03&#34;],
	    &#34;chain_id&#34;:&#34;0afc093ffb509f059c55478bc1a60351cef7b4e9c008a53a6cc8241ca8617dfe&#34;,
	    &#34;ethereum_node&#34;:&#34;https://ropsten.infura.io/v3/xxxxxxxxxxxxxxx&#34;,
	    &#34;zbox_host&#34;:&#34;https://0box.dev.0chain.net&#34;,
	    &#34;zbox_app_type&#34;:&#34;vult&#34;,
	    }
	 */
	public static native void init(String chainConfigJSON) throws Exception;
	/**
	 * InitSignatureScheme initializes signature scheme only.
	 */
	public static native void initSignatureScheme(String scheme);
	/**
	 * IsMnemonicValid is an utility function to check the mnemonic valid
	
		# Inputs
		-	mnemonic: mnemonics
	 */
	public static native boolean isMnemonicValid(String mnemonic);
	public static native BurnTicket newBurnTicket(String hash, long nonce);
	/**
	 * RecoverOfflineWallet recovers the previously generated wallet using the mnemonic.
	 */
	public static native String recoverOfflineWallet(String mnemonic) throws Exception;
	/**
	 * RecoverWallet recovers the previously generated wallet using the mnemonic.
	It also registers the wallet again to block chain.
	 */
	public static native void recoverWallet(String mnemonic, WalletCallback statusCb) throws Exception;
	/**
	 * SetAuthUrl will be called by app to set zauth URL to SDK.
	# Inputs
	  - url: the url of zAuth server
	 */
	public static native void setAuthUrl(String url) throws Exception;
	/**
	 * SetLogFile - sets file path to write log
	verbose - true - console output; false - no console output
	 */
	public static native void setLogFile(String logFile, boolean verbose);
	/**
	 * SetLogLevel set the log level.
	lvl - 0 disabled; higher number (upto 4) more verbosity
	 */
	public static native void setLogLevel(long lvl);
	// skipped function SetWallet with unsupported parameter or return types
	
	/**
	 * SetWalletInfo should be set before any transaction or client specific APIs
	splitKeyWallet parameter is valid only if SignatureScheme is &#34;BLS0Chain&#34;
	
		# Inputs
		- jsonWallet: json format of wallet
		{
		&#34;client_id&#34;:&#34;30764bcba73216b67c36b05a17b4dd076bfdc5bb0ed84856f27622188c377269&#34;,
		&#34;client_key&#34;:&#34;1f495df9605a4479a7dd6e5c7a78caf9f9d54e3a40f62a3dd68ed377115fe614d8acf0c238025f67a85163b9fbf31d10fbbb4a551d1cf00119897edf18b1841c&#34;,
		&#34;keys&#34;:[
			{&#34;public_key&#34;:&#34;1f495df9605a4479a7dd6e5c7a78caf9f9d54e3a40f62a3dd68ed377115fe614d8acf0c238025f67a85163b9fbf31d10fbbb4a551d1cf00119897edf18b1841c&#34;,&#34;private_key&#34;:&#34;41729ed8d82f782646d2d30b9719acfd236842b9b6e47fee12b7bdbd05b35122&#34;}
		],
		&#34;mnemonics&#34;:&#34;glare mistake gun joke bid spare across diagram wrap cube swear cactus cave repeat you brave few best wild lion pitch pole original wasp&#34;,
		&#34;version&#34;:&#34;1.0&#34;,
		&#34;date_created&#34;:&#34;1662534022&#34;,
		&#34;nonce&#34;:0
		}
	
	- splitKeyWallet: if wallet keys is split
	 */
	public static native void setWalletInfo(String jsonWallet, boolean splitKeyWallet) throws Exception;
	/**
	 * SetupAuth prepare auth app with clientid, key and a set of public, private key and local publickey
	which is running on PC/Mac.
	 */
	public static native void setupAuth(String authHost, String clientID, String clientKey, String publicKey, String privateKey, String localPublicKey, AuthCallback cb) throws Exception;
	/**
	 * Split keys from the primary master key
	 */
	public static native String splitKeys(String privateKey, long numSplits) throws Exception;
}
