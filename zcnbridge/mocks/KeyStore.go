// Code generated by mockery v2.36.0. DO NOT EDIT.

package mocks

import (
	accounts "github.com/ethereum/go-ethereum/accounts"
	keystore "github.com/ethereum/go-ethereum/accounts/keystore"

	mock "github.com/stretchr/testify/mock"

	time "time"
)

// KeyStore is an autogenerated mock type for the KeyStore type
type KeyStore struct {
	mock.Mock
}

// Find provides a mock function with given fields: _a0
func (_m *KeyStore) Find(_a0 accounts.Account) (accounts.Account, error) {
	ret := _m.Called(_a0)

	var r0 accounts.Account
	var r1 error
	if rf, ok := ret.Get(0).(func(accounts.Account) (accounts.Account, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(accounts.Account) accounts.Account); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(accounts.Account)
	}

	if rf, ok := ret.Get(1).(func(accounts.Account) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetEthereumKeyStore provides a mock function with given fields:
func (_m *KeyStore) GetEthereumKeyStore() *keystore.KeyStore {
	ret := _m.Called()

	var r0 *keystore.KeyStore
	if rf, ok := ret.Get(0).(func() *keystore.KeyStore); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*keystore.KeyStore)
		}
	}

	return r0
}

// SignHash provides a mock function with given fields: account, hash
func (_m *KeyStore) SignHash(account accounts.Account, hash []byte) ([]byte, error) {
	ret := _m.Called(account, hash)

	var r0 []byte
	var r1 error
	if rf, ok := ret.Get(0).(func(accounts.Account, []byte) ([]byte, error)); ok {
		return rf(account, hash)
	}
	if rf, ok := ret.Get(0).(func(accounts.Account, []byte) []byte); ok {
		r0 = rf(account, hash)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	if rf, ok := ret.Get(1).(func(accounts.Account, []byte) error); ok {
		r1 = rf(account, hash)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TimedUnlock provides a mock function with given fields: _a0, _a1, _a2
func (_m *KeyStore) TimedUnlock(_a0 accounts.Account, _a1 string, _a2 time.Duration) error {
	ret := _m.Called(_a0, _a1, _a2)

	var r0 error
	if rf, ok := ret.Get(0).(func(accounts.Account, string, time.Duration) error); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewKeyStore creates a new instance of KeyStore. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewKeyStore(t interface {
	mock.TestingT
	Cleanup(func())
}) *KeyStore {
	mock := &KeyStore{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
