// Code generated by mockery v2.22.1. DO NOT EDIT.

package mocks

import (
	sdk "github.com/0chain/gosdk/zboxcore/sdk"
	mock "github.com/stretchr/testify/mock"
)

// ChunkedUploadChunkReader is an autogenerated mock type for the ChunkedUploadChunkReader type
type ChunkedUploadChunkReader struct {
	mock.Mock
}

// Next provides a mock function with given fields:
func (_m *ChunkedUploadChunkReader) Next() (*sdk.ChunkData, error) {
	ret := _m.Called()

	var r0 *sdk.ChunkData
	var r1 error
	if rf, ok := ret.Get(0).(func() (*sdk.ChunkData, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() *sdk.ChunkData); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sdk.ChunkData)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Read provides a mock function with given fields: buf
func (_m *ChunkedUploadChunkReader) Read(buf []byte) ([][]byte, error) {
	ret := _m.Called(buf)

	var r0 [][]byte
	var r1 error
	if rf, ok := ret.Get(0).(func([]byte) ([][]byte, error)); ok {
		return rf(buf)
	}
	if rf, ok := ret.Get(0).(func([]byte) [][]byte); ok {
		r0 = rf(buf)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([][]byte)
		}
	}

	if rf, ok := ret.Get(1).(func([]byte) error); ok {
		r1 = rf(buf)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewChunkedUploadChunkReader interface {
	mock.TestingT
	Cleanup(func())
}

// NewChunkedUploadChunkReader creates a new instance of ChunkedUploadChunkReader. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewChunkedUploadChunkReader(t mockConstructorTestingTNewChunkedUploadChunkReader) *ChunkedUploadChunkReader {
	mock := &ChunkedUploadChunkReader{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
