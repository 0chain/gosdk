// Code generated by mockery v2.36.0. DO NOT EDIT.

package mocks

import (
	common "github.com/0chain/gosdk/core/common"

	mock "github.com/stretchr/testify/mock"
)

// RefEntity is an autogenerated mock type for the RefEntity type
type RefEntity struct {
	mock.Mock
}

// CalculateHash provides a mock function with given fields:
func (_m *RefEntity) CalculateHash() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// GetCreatedAt provides a mock function with given fields:
func (_m *RefEntity) GetCreatedAt() common.Timestamp {
	ret := _m.Called()

	var r0 common.Timestamp
	if rf, ok := ret.Get(0).(func() common.Timestamp); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(common.Timestamp)
	}

	return r0
}

// GetFileID provides a mock function with given fields:
func (_m *RefEntity) GetFileID() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// GetFileMetaHash provides a mock function with given fields:
func (_m *RefEntity) GetFileMetaHash() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// GetHash provides a mock function with given fields:
func (_m *RefEntity) GetHash() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// GetLookupHash provides a mock function with given fields:
func (_m *RefEntity) GetLookupHash() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// GetName provides a mock function with given fields:
func (_m *RefEntity) GetName() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// GetNumBlocks provides a mock function with given fields:
func (_m *RefEntity) GetNumBlocks() int64 {
	ret := _m.Called()

	var r0 int64
	if rf, ok := ret.Get(0).(func() int64); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(int64)
	}

	return r0
}

// GetPath provides a mock function with given fields:
func (_m *RefEntity) GetPath() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// GetPathHash provides a mock function with given fields:
func (_m *RefEntity) GetPathHash() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// GetSize provides a mock function with given fields:
func (_m *RefEntity) GetSize() int64 {
	ret := _m.Called()

	var r0 int64
	if rf, ok := ret.Get(0).(func() int64); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(int64)
	}

	return r0
}

// GetType provides a mock function with given fields:
func (_m *RefEntity) GetType() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// GetUpdatedAt provides a mock function with given fields:
func (_m *RefEntity) GetUpdatedAt() common.Timestamp {
	ret := _m.Called()

	var r0 common.Timestamp
	if rf, ok := ret.Get(0).(func() common.Timestamp); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(common.Timestamp)
	}

	return r0
}

// NewRefEntity creates a new instance of RefEntity. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewRefEntity(t interface {
	mock.TestingT
	Cleanup(func())
}) *RefEntity {
	mock := &RefEntity{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
