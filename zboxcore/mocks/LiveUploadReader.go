// Code generated by mockery v2.28.1. DO NOT EDIT.

package mocks

import mock "github.com/stretchr/testify/mock"

// LiveUploadReader is an autogenerated mock type for the LiveUploadReader type
type LiveUploadReader struct {
	mock.Mock
}

// GetClipsFile provides a mock function with given fields: clipsIndex
func (_m *LiveUploadReader) GetClipsFile(clipsIndex int) string {
	ret := _m.Called(clipsIndex)

	var r0 string
	if rf, ok := ret.Get(0).(func(int) string); ok {
		r0 = rf(clipsIndex)
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// GetClipsFileName provides a mock function with given fields: cliipsIndex
func (_m *LiveUploadReader) GetClipsFileName(cliipsIndex int) string {
	ret := _m.Called(cliipsIndex)

	var r0 string
	if rf, ok := ret.Get(0).(func(int) string); ok {
		r0 = rf(cliipsIndex)
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// Read provides a mock function with given fields: p
func (_m *LiveUploadReader) Read(p []byte) (int, error) {
	ret := _m.Called(p)

	var r0 int
	var r1 error
	if rf, ok := ret.Get(0).(func([]byte) (int, error)); ok {
		return rf(p)
	}
	if rf, ok := ret.Get(0).(func([]byte) int); ok {
		r0 = rf(p)
	} else {
		r0 = ret.Get(0).(int)
	}

	if rf, ok := ret.Get(1).(func([]byte) error); ok {
		r1 = rf(p)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Size provides a mock function with given fields:
func (_m *LiveUploadReader) Size() int64 {
	ret := _m.Called()

	var r0 int64
	if rf, ok := ret.Get(0).(func() int64); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(int64)
	}

	return r0
}

type mockConstructorTestingTNewLiveUploadReader interface {
	mock.TestingT
	Cleanup(func())
}

// NewLiveUploadReader creates a new instance of LiveUploadReader. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewLiveUploadReader(t mockConstructorTestingTNewLiveUploadReader) *LiveUploadReader {
	mock := &LiveUploadReader{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
