// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import mock "github.com/stretchr/testify/mock"

// Hasher is an autogenerated mock type for the Hasher type
type Hasher struct {
	mock.Mock
}

// GetChallengeHash provides a mock function with given fields:
func (_m *Hasher) GetChallengeHash() (string, error) {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetContentHash provides a mock function with given fields:
func (_m *Hasher) GetContentHash() (string, error) {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetFileHash provides a mock function with given fields:
func (_m *Hasher) GetFileHash() (string, error) {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// WriteHashToContent provides a mock function with given fields: hash, chunkIndex
func (_m *Hasher) WriteHashToContent(hash string, chunkIndex int) error {
	ret := _m.Called(hash, chunkIndex)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, int) error); ok {
		r0 = rf(hash, chunkIndex)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// WriteToChallenge provides a mock function with given fields: buf, chunkIndex
func (_m *Hasher) WriteToChallenge(buf []byte, chunkIndex int) error {
	ret := _m.Called(buf, chunkIndex)

	var r0 error
	if rf, ok := ret.Get(0).(func([]byte, int) error); ok {
		r0 = rf(buf, chunkIndex)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// WriteToFile provides a mock function with given fields: buf, chunkIndex
func (_m *Hasher) WriteToFile(buf []byte, chunkIndex int) error {
	ret := _m.Called(buf, chunkIndex)

	var r0 error
	if rf, ok := ret.Get(0).(func([]byte, int) error); ok {
		r0 = rf(buf, chunkIndex)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewHasher interface {
	mock.TestingT
	Cleanup(func())
}

// NewHasher creates a new instance of Hasher. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewHasher(t mockConstructorTestingTNewHasher) *Hasher {
	mock := &Hasher{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
