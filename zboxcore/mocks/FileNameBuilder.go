// Code generated by mockery v2.22.1. DO NOT EDIT.

package mocks

import mock "github.com/stretchr/testify/mock"

// FileNameBuilder is an autogenerated mock type for the FileNameBuilder type
type FileNameBuilder struct {
	mock.Mock
}

// ClipsFile provides a mock function with given fields: index
func (_m *FileNameBuilder) ClipsFile(index int) string {
	ret := _m.Called(index)

	var r0 string
	if rf, ok := ret.Get(0).(func(int) string); ok {
		r0 = rf(index)
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// ClipsFileName provides a mock function with given fields: index
func (_m *FileNameBuilder) ClipsFileName(index int) string {
	ret := _m.Called(index)

	var r0 string
	if rf, ok := ret.Get(0).(func(int) string); ok {
		r0 = rf(index)
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// FileExt provides a mock function with given fields:
func (_m *FileNameBuilder) FileExt() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// OutDir provides a mock function with given fields:
func (_m *FileNameBuilder) OutDir() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// OutFile provides a mock function with given fields:
func (_m *FileNameBuilder) OutFile() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

type mockConstructorTestingTNewFileNameBuilder interface {
	mock.TestingT
	Cleanup(func())
}

// NewFileNameBuilder creates a new instance of FileNameBuilder. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewFileNameBuilder(t mockConstructorTestingTNewFileNameBuilder) *FileNameBuilder {
	mock := &FileNameBuilder{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
