// Code generated by mockery v0.0.0-dev. DO NOT EDIT.

package mocks

import (
	zcncrypto "github.com/0chain/gosdk/core/zcncrypto"
	mock "github.com/stretchr/testify/mock"
)

// SignatureScheme is an autogenerated mock type for the SignatureScheme type
type SignatureScheme struct {
	mock.Mock
}


// Add provides a mock function with given fields: signature, msg
func (_m *SignatureScheme) Add(signature string, msg string) (string, error) {
	ret := _m.Called(signature, msg)

	var r0 string
	if rf, ok := ret.Get(0).(func(string, string) string); ok {
		r0 = rf(signature, msg)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(signature, msg)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GenerateKeys provides a mock function with given fields:
func (_m *SignatureScheme) GenerateKeys() (*zcncrypto.Wallet, error) {
	ret := _m.Called()

	var r0 *zcncrypto.Wallet
	if rf, ok := ret.Get(0).(func() *zcncrypto.Wallet); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*zcncrypto.Wallet)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetPrivateKey provides a mock function with given fields:
func (_m *SignatureScheme) GetPrivateKey() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// GetPublicKey provides a mock function with given fields:
func (_m *SignatureScheme) GetPublicKey() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// RecoverKeys provides a mock function with given fields: mnemonic
func (_m *SignatureScheme) RecoverKeys(mnemonic string) (*zcncrypto.Wallet, error) {
	ret := _m.Called(mnemonic)

	var r0 *zcncrypto.Wallet
	if rf, ok := ret.Get(0).(func(string) *zcncrypto.Wallet); ok {
		r0 = rf(mnemonic)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*zcncrypto.Wallet)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(mnemonic)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SetPrivateKey provides a mock function with given fields: privateKey
func (_m *SignatureScheme) SetPrivateKey(privateKey string) error {
	ret := _m.Called(privateKey)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(privateKey)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SetPublicKey provides a mock function with given fields: publicKey
func (_m *SignatureScheme) SetPublicKey(publicKey string) error {
	ret := _m.Called(publicKey)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(publicKey)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Sign provides a mock function with given fields: hash
func (_m *SignatureScheme) Sign(hash string) (string, error) {
	ret := _m.Called(hash)

	var r0 string
	if rf, ok := ret.Get(0).(func(string) string); ok {
		r0 = rf(hash)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(hash)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Verify provides a mock function with given fields: signature, msg
func (_m *SignatureScheme) Verify(signature string, msg string) (bool, error) {
	ret := _m.Called(signature, msg)

	var r0 bool
	if rf, ok := ret.Get(0).(func(string, string) bool); ok {
		r0 = rf(signature, msg)
	} else {
		r0 = ret.Get(0).(bool)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(signature, msg)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
